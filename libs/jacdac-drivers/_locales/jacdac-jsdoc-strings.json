{
  "JacDacDriverStatus.device": "Returns the JDDevice instnace",
  "JacDacDriverStatus.id": "Get device id for events.",
  "JacDacDriverStatus.isConnected": "Check if driver is connected.",
  "JacDacDriverStatus.isPairedInstanceAddress": "If paired, paired instance address",
  "JacDacDriverStatus.setBridge": "Set driver as bridge",
  "jacdac": "A Joint Asynchronous Communications, Device Agnostic Control.\n\nJACDAC protocol support\n\nJACDAC protocol support",
  "jacdac.Driver.handleControlPacket": "Called by the logic driver when a control packet is received",
  "jacdac.Driver.handlePacket": "Called by the logic driver when a data packet is addressed to this driver\nReturn false when the packet wasn't handled here.",
  "jacdac.Driver.onDriverEvent": "Registers code to run a on a particular event",
  "jacdac.Driver.onDriverEvent|param|event": "@param handler ",
  "jacdac.JDDevice.isBroadcastDriver": "Used to determine what mode the driver is currently in.\n* This will check to see if the flags field resembles the BroadcastDriver mode specified in the DriverType enumeration.\n* @returns true if in BroadcastDriver mode.",
  "jacdac.JDDevice.isHostDriver": "Used to determine what mode the driver is currently in.\n* This will check to see if the flags field resembles the HostDriver mode specified in the DriverType enumeration.\n* @returns true if in SnifferDriver mode.",
  "jacdac.JDDevice.isPairable": "Indicates if the driver can be currently paired to another.\n* @returns true if pairable",
  "jacdac.JDDevice.isPaired": "Indicates if the driver is currently paired to another.\n* @returns true if paired",
  "jacdac.JDDevice.isPairedDriver": "Used to determine what mode the driver is currently in.\n* This will check to see if the flags field resembles the PairedDriver mode specified in the DriverType enumeration.\n* @returns true if in PairedDriver mode.",
  "jacdac.JDDevice.isPairing": "Indicates if the driver is currently in the process of pairing to another.\n* @returns true if pairing",
  "jacdac.JDDevice.isSnifferDriver": "Used to determine what mode the driver is currently in.\n* This will check to see if the flags field resembles the SnifferDriver mode specified in the DriverType enumeration.\n* @returns true if in SnifferDriver mode.",
  "jacdac.JDDevice.isVirtualDriver": "Used to determine what mode the driver is currently in.\n* This will check to see if the flags field resembles the VirtualDriver mode specified in the DriverType enumeration.\n* @returns true if in VirtualDriver mode.",
  "jacdac.PairableDriver": "base class for pairable drivers",
  "jacdac.SensorHostDriver": "JacDac service running on sensor and streaming data out",
  "jacdac.SensorVirtualDriver.setStreaming": "Enables or disable streaming the sensor internal state",
  "jacdac.SensorVirtualDriver.setStreaming|param|on": "streaming enabled",
  "jacdac.addDriver": "Adds a JacDac device driver",
  "jacdac.addDriver|param|n": "driver",
  "jacdac.clearBridge": "Clears any existing bridge",
  "jacdac.sendPacket": "Sends a packet",
  "jacdac.sendPacket|param|pkt": "jackdack data",
  "jacdac.start": "Starts the JacDac protocol",
  "jacdac.stop": "Starts the JacDac protocol"
}